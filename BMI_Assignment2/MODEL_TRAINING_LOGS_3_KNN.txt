>>> from sklearn.neighbors import KNeighborsClassifier
>>> knn_classifier = KNeighborsClassifier()
>>> for train_index, test_index in skf.split(texts_preprocessed,classes):
...     texts_preprocessed_train = [texts_preprocessed[i] for i in train_index]
...     texts_preprocessed_train_ = [texts_preprocessed_[i] for i in train_index]
...     texts_preprocessed_dev = [texts_preprocessed[i] for i in test_index]
...     texts_preprocessed_dev_ = [texts_preprocessed_[i] for i in test_index]
...     # Feature 1: n-grams
...     # VECTORIZE
...     vectorizer = CountVectorizer(ngram_range=(1, 3), analyzer="word", tokenizer=None, stop_words='english', preprocessor=None,
...                                     max_features=mx_ftr_gram)
...     vectorizer.fit(texts_preprocessed_train)
...     training_gram = vectorizer.transform(texts_preprocessed_train).toarray()
...     test_gram = vectorizer.transform(texts_preprocessed_dev).toarray()
...     # Feature 2: clusters
...     clusters_train = []; clusters_train_ = [];
...     clusters_dev = []; clusters_dev_ = [];
...     #PROGRAMMING TIP: c++ style coding here can help when doing feature engineering.. see below
...     clusters_train = getClusters(texts_preprocessed_train); clusters_dev = getClusters(texts_preprocessed_dev); 
...     clusters_train_ = getClusters(texts_preprocessed_train_); clusters_dev_ = getClusters(texts_preprocessed_dev_)
...     #VECTORIZE
...     cluster_train = clustervectorizer.fit_transform(clusters_train).toarray(); cluster_dev = clustervectorizer.transform(clusters_dev).toarray();
...     cluster_train_ = clustervectorizer.fit_transform(clusters_train_).toarray(); cluster_dev_ = clustervectorizer.transform(clusters_dev_).toarray()
...     # Combine all features together
...     training_data = np.concatenate((training_gram, cluster_train, cluster_train_, non_text_TRAIN.iloc[train_index]), axis=1)
...     test_data = np.concatenate((test_gram,cluster_dev, cluster_dev_, non_text_TRAIN.iloc[test_index]),axis=1)
...     ttp_train, ttp_test = classes[train_index], classes[test_index]
...     grid_params = {
...         'n_neighbors': [3, 5, 7, 9],  # Number of neighbors to consider
...         'weights': ['uniform', 'distance'],  # Weighting of neighbors
...         'p': [1, 2]  # Power parameter for the Minkowski distance metric (1 for Manhattan, 2 for Euclidean)
...     }
...     results, grid = search_hyperparam_space(grid_params, knn_classifier, training_data,ttp_train,test_data,ttp_test)
...     print("Best parameters set found on development set:")
...     print(grid.best_params_)
...     print("Grid scores on development set:")
...     means = grid.cv_results_['mean_test_score']
...     stds = grid.cv_results_['std_test_score']
...     for mean, std, params in zip(means, stds, grid.cv_results_['params']):
...         print("%0.3f (+/-%0.03f) for %r"
...                 % (mean, std * 2, params))
...     # TRAIN THE MODEL
...     knn_classifier = grid.best_estimator_.fit(training_data, ttp_train)
...     predictions = knn_classifier.predict(test_data)    
...     accuracy, f1_micro, f1_macro = accuracy_score(ttp_test, predictions), f1_score(ttp_test, predictions, average='micro'), f1_score(ttp_test, predictions, average='macro')
...     # Print the results
...     print(f'Accuracy: {accuracy:.2f}')
...     print(f'Micro-averaged F1 Score: {f1_micro:.2f}')
...     print(f'Macro-averaged F1 Score: {f1_macro:.2f}')
... 
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'n_neighbors': 5, 'p': 1, 'weights': 'distance'}
Grid scores on development set:
0.918 (+/-0.037) for {'n_neighbors': 3, 'p': 1, 'weights': 'uniform'}
0.926 (+/-0.040) for {'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
0.889 (+/-0.084) for {'n_neighbors': 3, 'p': 2, 'weights': 'uniform'}
0.907 (+/-0.099) for {'n_neighbors': 3, 'p': 2, 'weights': 'distance'}
0.907 (+/-0.066) for {'n_neighbors': 5, 'p': 1, 'weights': 'uniform'}
0.933 (+/-0.029) for {'n_neighbors': 5, 'p': 1, 'weights': 'distance'}
0.881 (+/-0.049) for {'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
0.918 (+/-0.083) for {'n_neighbors': 5, 'p': 2, 'weights': 'distance'}
0.896 (+/-0.037) for {'n_neighbors': 7, 'p': 1, 'weights': 'uniform'}
0.918 (+/-0.018) for {'n_neighbors': 7, 'p': 1, 'weights': 'distance'}
0.862 (+/-0.060) for {'n_neighbors': 7, 'p': 2, 'weights': 'uniform'}
0.915 (+/-0.037) for {'n_neighbors': 7, 'p': 2, 'weights': 'distance'}
0.896 (+/-0.069) for {'n_neighbors': 9, 'p': 1, 'weights': 'uniform'}
0.911 (+/-0.083) for {'n_neighbors': 9, 'p': 1, 'weights': 'distance'}
0.855 (+/-0.063) for {'n_neighbors': 9, 'p': 2, 'weights': 'uniform'}
0.911 (+/-0.043) for {'n_neighbors': 9, 'p': 2, 'weights': 'distance'}
Accuracy: 0.93
Micro-averaged F1 Score: 0.93
Macro-averaged F1 Score: 0.93
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
Grid scores on development set:
0.922 (+/-0.043) for {'n_neighbors': 3, 'p': 1, 'weights': 'uniform'}
0.929 (+/-0.043) for {'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
0.889 (+/-0.102) for {'n_neighbors': 3, 'p': 2, 'weights': 'uniform'}
0.911 (+/-0.082) for {'n_neighbors': 3, 'p': 2, 'weights': 'distance'}
0.900 (+/-0.049) for {'n_neighbors': 5, 'p': 1, 'weights': 'uniform'}
0.922 (+/-0.027) for {'n_neighbors': 5, 'p': 1, 'weights': 'distance'}
0.885 (+/-0.075) for {'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
0.907 (+/-0.081) for {'n_neighbors': 5, 'p': 2, 'weights': 'distance'}
0.907 (+/-0.033) for {'n_neighbors': 7, 'p': 1, 'weights': 'uniform'}
0.915 (+/-0.029) for {'n_neighbors': 7, 'p': 1, 'weights': 'distance'}
0.870 (+/-0.048) for {'n_neighbors': 7, 'p': 2, 'weights': 'uniform'}
0.926 (+/-0.040) for {'n_neighbors': 7, 'p': 2, 'weights': 'distance'}
0.903 (+/-0.056) for {'n_neighbors': 9, 'p': 1, 'weights': 'uniform'}
0.914 (+/-0.038) for {'n_neighbors': 9, 'p': 1, 'weights': 'distance'}
0.885 (+/-0.050) for {'n_neighbors': 9, 'p': 2, 'weights': 'uniform'}
0.918 (+/-0.037) for {'n_neighbors': 9, 'p': 2, 'weights': 'distance'}
Accuracy: 0.93
Micro-averaged F1 Score: 0.93
Macro-averaged F1 Score: 0.93
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'n_neighbors': 7, 'p': 1, 'weights': 'distance'}
Grid scores on development set:
0.922 (+/-0.079) for {'n_neighbors': 3, 'p': 1, 'weights': 'uniform'}
0.929 (+/-0.079) for {'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
0.892 (+/-0.086) for {'n_neighbors': 3, 'p': 2, 'weights': 'uniform'}
0.911 (+/-0.103) for {'n_neighbors': 3, 'p': 2, 'weights': 'distance'}
0.915 (+/-0.037) for {'n_neighbors': 5, 'p': 1, 'weights': 'uniform'}
0.929 (+/-0.028) for {'n_neighbors': 5, 'p': 1, 'weights': 'distance'}
0.862 (+/-0.031) for {'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
0.907 (+/-0.057) for {'n_neighbors': 5, 'p': 2, 'weights': 'distance'}
0.911 (+/-0.036) for {'n_neighbors': 7, 'p': 1, 'weights': 'uniform'}
0.933 (+/-0.030) for {'n_neighbors': 7, 'p': 1, 'weights': 'distance'}
0.862 (+/-0.038) for {'n_neighbors': 7, 'p': 2, 'weights': 'uniform'}
0.914 (+/-0.045) for {'n_neighbors': 7, 'p': 2, 'weights': 'distance'}
0.885 (+/-0.064) for {'n_neighbors': 9, 'p': 1, 'weights': 'uniform'}
0.911 (+/-0.083) for {'n_neighbors': 9, 'p': 1, 'weights': 'distance'}
0.877 (+/-0.060) for {'n_neighbors': 9, 'p': 2, 'weights': 'uniform'}
0.918 (+/-0.055) for {'n_neighbors': 9, 'p': 2, 'weights': 'distance'}
Accuracy: 0.93
Micro-averaged F1 Score: 0.93
Macro-averaged F1 Score: 0.93
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
Grid scores on development set:
0.933 (+/-0.050) for {'n_neighbors': 3, 'p': 1, 'weights': 'uniform'}
0.941 (+/-0.054) for {'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
0.911 (+/-0.063) for {'n_neighbors': 3, 'p': 2, 'weights': 'uniform'}
0.918 (+/-0.060) for {'n_neighbors': 3, 'p': 2, 'weights': 'distance'}
0.922 (+/-0.028) for {'n_neighbors': 5, 'p': 1, 'weights': 'uniform'}
0.926 (+/-0.025) for {'n_neighbors': 5, 'p': 1, 'weights': 'distance'}
0.877 (+/-0.044) for {'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
0.911 (+/-0.072) for {'n_neighbors': 5, 'p': 2, 'weights': 'distance'}
0.896 (+/-0.019) for {'n_neighbors': 7, 'p': 1, 'weights': 'uniform'}
0.918 (+/-0.018) for {'n_neighbors': 7, 'p': 1, 'weights': 'distance'}
0.862 (+/-0.038) for {'n_neighbors': 7, 'p': 2, 'weights': 'uniform'}
0.907 (+/-0.033) for {'n_neighbors': 7, 'p': 2, 'weights': 'distance'}
0.877 (+/-0.051) for {'n_neighbors': 9, 'p': 1, 'weights': 'uniform'}
0.914 (+/-0.038) for {'n_neighbors': 9, 'p': 1, 'weights': 'distance'}
0.881 (+/-0.111) for {'n_neighbors': 9, 'p': 2, 'weights': 'uniform'}
0.922 (+/-0.075) for {'n_neighbors': 9, 'p': 2, 'weights': 'distance'}
Accuracy: 0.87
Micro-averaged F1 Score: 0.87
Macro-averaged F1 Score: 0.86
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
Grid scores on development set:
0.926 (+/-0.023) for {'n_neighbors': 3, 'p': 1, 'weights': 'uniform'}
0.933 (+/-0.038) for {'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
0.892 (+/-0.043) for {'n_neighbors': 3, 'p': 2, 'weights': 'uniform'}
0.907 (+/-0.062) for {'n_neighbors': 3, 'p': 2, 'weights': 'distance'}
0.914 (+/-0.051) for {'n_neighbors': 5, 'p': 1, 'weights': 'uniform'}
0.929 (+/-0.045) for {'n_neighbors': 5, 'p': 1, 'weights': 'distance'}
0.870 (+/-0.040) for {'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
0.907 (+/-0.023) for {'n_neighbors': 5, 'p': 2, 'weights': 'distance'}
0.907 (+/-0.079) for {'n_neighbors': 7, 'p': 1, 'weights': 'uniform'}
0.929 (+/-0.051) for {'n_neighbors': 7, 'p': 1, 'weights': 'distance'}
0.851 (+/-0.041) for {'n_neighbors': 7, 'p': 2, 'weights': 'uniform'}
0.896 (+/-0.029) for {'n_neighbors': 7, 'p': 2, 'weights': 'distance'}
0.896 (+/-0.073) for {'n_neighbors': 9, 'p': 1, 'weights': 'uniform'}
0.926 (+/-0.054) for {'n_neighbors': 9, 'p': 1, 'weights': 'distance'}
0.851 (+/-0.032) for {'n_neighbors': 9, 'p': 2, 'weights': 'uniform'}
0.896 (+/-0.037) for {'n_neighbors': 9, 'p': 2, 'weights': 'distance'}
Accuracy: 0.90
Micro-averaged F1 Score: 0.90
Macro-averaged F1 Score: 0.90
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
Grid scores on development set:
0.926 (+/-0.041) for {'n_neighbors': 3, 'p': 1, 'weights': 'uniform'}
0.929 (+/-0.028) for {'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
0.888 (+/-0.023) for {'n_neighbors': 3, 'p': 2, 'weights': 'uniform'}
0.915 (+/-0.017) for {'n_neighbors': 3, 'p': 2, 'weights': 'distance'}
0.922 (+/-0.043) for {'n_neighbors': 5, 'p': 1, 'weights': 'uniform'}
0.922 (+/-0.043) for {'n_neighbors': 5, 'p': 1, 'weights': 'distance'}
0.863 (+/-0.028) for {'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
0.903 (+/-0.036) for {'n_neighbors': 5, 'p': 2, 'weights': 'distance'}
0.892 (+/-0.065) for {'n_neighbors': 7, 'p': 1, 'weights': 'uniform'}
0.918 (+/-0.065) for {'n_neighbors': 7, 'p': 1, 'weights': 'distance'}
0.874 (+/-0.037) for {'n_neighbors': 7, 'p': 2, 'weights': 'uniform'}
0.911 (+/-0.043) for {'n_neighbors': 7, 'p': 2, 'weights': 'distance'}
0.899 (+/-0.066) for {'n_neighbors': 9, 'p': 1, 'weights': 'uniform'}
0.914 (+/-0.066) for {'n_neighbors': 9, 'p': 1, 'weights': 'distance'}
0.862 (+/-0.086) for {'n_neighbors': 9, 'p': 2, 'weights': 'uniform'}
0.922 (+/-0.036) for {'n_neighbors': 9, 'p': 2, 'weights': 'distance'}
Accuracy: 0.97
Micro-averaged F1 Score: 0.97
Macro-averaged F1 Score: 0.97
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
Grid scores on development set:
0.900 (+/-0.038) for {'n_neighbors': 3, 'p': 1, 'weights': 'uniform'}
0.911 (+/-0.036) for {'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
0.874 (+/-0.059) for {'n_neighbors': 3, 'p': 2, 'weights': 'uniform'}
0.896 (+/-0.038) for {'n_neighbors': 3, 'p': 2, 'weights': 'distance'}
0.877 (+/-0.090) for {'n_neighbors': 5, 'p': 1, 'weights': 'uniform'}
0.892 (+/-0.076) for {'n_neighbors': 5, 'p': 1, 'weights': 'distance'}
0.848 (+/-0.053) for {'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
0.881 (+/-0.060) for {'n_neighbors': 5, 'p': 2, 'weights': 'distance'}
0.881 (+/-0.038) for {'n_neighbors': 7, 'p': 1, 'weights': 'uniform'}
0.900 (+/-0.056) for {'n_neighbors': 7, 'p': 1, 'weights': 'distance'}
0.851 (+/-0.070) for {'n_neighbors': 7, 'p': 2, 'weights': 'uniform'}
0.885 (+/-0.075) for {'n_neighbors': 7, 'p': 2, 'weights': 'distance'}
0.874 (+/-0.055) for {'n_neighbors': 9, 'p': 1, 'weights': 'uniform'}
0.903 (+/-0.050) for {'n_neighbors': 9, 'p': 1, 'weights': 'distance'}
0.859 (+/-0.078) for {'n_neighbors': 9, 'p': 2, 'weights': 'uniform'}
0.900 (+/-0.065) for {'n_neighbors': 9, 'p': 2, 'weights': 'distance'}
Accuracy: 0.97
Micro-averaged F1 Score: 0.97
Macro-averaged F1 Score: 0.97
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'n_neighbors': 3, 'p': 1, 'weights': 'uniform'}
Grid scores on development set:
0.933 (+/-0.044) for {'n_neighbors': 3, 'p': 1, 'weights': 'uniform'}
0.933 (+/-0.044) for {'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
0.881 (+/-0.019) for {'n_neighbors': 3, 'p': 2, 'weights': 'uniform'}
0.896 (+/-0.038) for {'n_neighbors': 3, 'p': 2, 'weights': 'distance'}
0.903 (+/-0.059) for {'n_neighbors': 5, 'p': 1, 'weights': 'uniform'}
0.922 (+/-0.059) for {'n_neighbors': 5, 'p': 1, 'weights': 'distance'}
0.870 (+/-0.052) for {'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
0.903 (+/-0.054) for {'n_neighbors': 5, 'p': 2, 'weights': 'distance'}
0.907 (+/-0.067) for {'n_neighbors': 7, 'p': 1, 'weights': 'uniform'}
0.918 (+/-0.051) for {'n_neighbors': 7, 'p': 1, 'weights': 'distance'}
0.877 (+/-0.061) for {'n_neighbors': 7, 'p': 2, 'weights': 'uniform'}
0.903 (+/-0.054) for {'n_neighbors': 7, 'p': 2, 'weights': 'distance'}
0.911 (+/-0.065) for {'n_neighbors': 9, 'p': 1, 'weights': 'uniform'}
0.914 (+/-0.066) for {'n_neighbors': 9, 'p': 1, 'weights': 'distance'}
0.885 (+/-0.072) for {'n_neighbors': 9, 'p': 2, 'weights': 'uniform'}
0.903 (+/-0.054) for {'n_neighbors': 9, 'p': 2, 'weights': 'distance'}
Accuracy: 0.93
Micro-averaged F1 Score: 0.93
Macro-averaged F1 Score: 0.93
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'n_neighbors': 5, 'p': 1, 'weights': 'distance'}
Grid scores on development set:
0.915 (+/-0.050) for {'n_neighbors': 3, 'p': 1, 'weights': 'uniform'}
0.915 (+/-0.050) for {'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
0.877 (+/-0.029) for {'n_neighbors': 3, 'p': 2, 'weights': 'uniform'}
0.889 (+/-0.022) for {'n_neighbors': 3, 'p': 2, 'weights': 'distance'}
0.918 (+/-0.083) for {'n_neighbors': 5, 'p': 1, 'weights': 'uniform'}
0.926 (+/-0.070) for {'n_neighbors': 5, 'p': 1, 'weights': 'distance'}
0.855 (+/-0.045) for {'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
0.881 (+/-0.019) for {'n_neighbors': 5, 'p': 2, 'weights': 'distance'}
0.903 (+/-0.060) for {'n_neighbors': 7, 'p': 1, 'weights': 'uniform'}
0.926 (+/-0.062) for {'n_neighbors': 7, 'p': 1, 'weights': 'distance'}
0.866 (+/-0.045) for {'n_neighbors': 7, 'p': 2, 'weights': 'uniform'}
0.903 (+/-0.037) for {'n_neighbors': 7, 'p': 2, 'weights': 'distance'}
0.881 (+/-0.070) for {'n_neighbors': 9, 'p': 1, 'weights': 'uniform'}
0.914 (+/-0.080) for {'n_neighbors': 9, 'p': 1, 'weights': 'distance'}
0.833 (+/-0.043) for {'n_neighbors': 9, 'p': 2, 'weights': 'uniform'}
0.903 (+/-0.029) for {'n_neighbors': 9, 'p': 2, 'weights': 'distance'}
Accuracy: 0.87
Micro-averaged F1 Score: 0.87
Macro-averaged F1 Score: 0.86
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
Grid scores on development set:
0.919 (+/-0.038) for {'n_neighbors': 3, 'p': 1, 'weights': 'uniform'}
0.926 (+/-0.033) for {'n_neighbors': 3, 'p': 1, 'weights': 'distance'}
0.889 (+/-0.047) for {'n_neighbors': 3, 'p': 2, 'weights': 'uniform'}
0.893 (+/-0.043) for {'n_neighbors': 3, 'p': 2, 'weights': 'distance'}
0.889 (+/-0.070) for {'n_neighbors': 5, 'p': 1, 'weights': 'uniform'}
0.904 (+/-0.064) for {'n_neighbors': 5, 'p': 1, 'weights': 'distance'}
0.863 (+/-0.069) for {'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
0.878 (+/-0.055) for {'n_neighbors': 5, 'p': 2, 'weights': 'distance'}
0.885 (+/-0.095) for {'n_neighbors': 7, 'p': 1, 'weights': 'uniform'}
0.907 (+/-0.066) for {'n_neighbors': 7, 'p': 1, 'weights': 'distance'}
0.856 (+/-0.108) for {'n_neighbors': 7, 'p': 2, 'weights': 'uniform'}
0.889 (+/-0.066) for {'n_neighbors': 7, 'p': 2, 'weights': 'distance'}
0.878 (+/-0.080) for {'n_neighbors': 9, 'p': 1, 'weights': 'uniform'}
0.893 (+/-0.082) for {'n_neighbors': 9, 'p': 1, 'weights': 'distance'}
0.859 (+/-0.116) for {'n_neighbors': 9, 'p': 2, 'weights': 'uniform'}
0.889 (+/-0.070) for {'n_neighbors': 9, 'p': 2, 'weights': 'distance'}
Accuracy: 0.93
Micro-averaged F1 Score: 0.93
Macro-averaged F1 Score: 0.93