>>> xgb_classifier = xgb.XGBClassifier(subsample = 0.8, objective = "reg:logistic", 
...                                    max_depth = 6, booster = 'gbtree', 
...                                    eval_metric = 'auc')
>>> 
>>> for train_index, test_index in skf.split(texts_preprocessed,classes):
...     texts_preprocessed_train = [texts_preprocessed[i] for i in train_index]
...     texts_preprocessed_train_ = [texts_preprocessed_[i] for i in train_index]
...     texts_preprocessed_dev = [texts_preprocessed[i] for i in test_index]
...     texts_preprocessed_dev_ = [texts_preprocessed_[i] for i in test_index]
...     # Feature 1: n-grams
...     # VECTORIZE
...     vectorizer = CountVectorizer(ngram_range=(1, 3), analyzer="word", tokenizer=None, stop_words='english', preprocessor=None,
...                                     max_features=mx_ftr_gram)
...     vectorizer.fit(texts_preprocessed_train)
...     training_gram = vectorizer.transform(texts_preprocessed_train).toarray()
...     test_gram = vectorizer.transform(texts_preprocessed_dev).toarray()
...     # Feature 2: clusters
...     clusters_train = []; clusters_train_ = [];
...     clusters_dev = []; clusters_dev_ = [];
...     #PROGRAMMING TIP: c++ style coding here can help when doing feature engineering.. see below
...     clusters_train = getClusters(texts_preprocessed_train); clusters_dev = getClusters(texts_preprocessed_dev); 
...     clusters_train_ = getClusters(texts_preprocessed_train_); clusters_dev_ = getClusters(texts_preprocessed_dev_)
...     #VECTORIZE
...     cluster_train = clustervectorizer.fit_transform(clusters_train).toarray(); cluster_dev = clustervectorizer.transform(clusters_dev).toarray();
...     cluster_train_ = clustervectorizer.fit_transform(clusters_train_).toarray(); cluster_dev_ = clustervectorizer.transform(clusters_dev_).toarray()
...     # Combine all features together
...     training_data = np.concatenate((training_gram, cluster_train, cluster_train_), axis=1)
...     test_data = np.concatenate((test_gram,cluster_dev, cluster_dev_),axis=1)
...     ttp_train, ttp_test = classes[train_index], classes[test_index]
...     grid_params = {
...         'learning_rate': [0.1, 0.2],  # Learning rate
...         'n_estimators': [50, 100, 200],  # Number of boosting rounds
...         'reg_lambda': [0.01, 0.1],
...         'alpha': [0.01, 0.1]
...         }
...     results, grid = search_hyperparam_space(grid_params, xgb_classifier, training_data,ttp_train,test_data,ttp_test)
...     print("Best parameters set found on development set:")
...     print(grid.best_params_)
...     print("Grid scores on development set:")
...     means = grid.cv_results_['mean_test_score']
...     stds = grid.cv_results_['std_test_score']
...     for mean, std, params in zip(means, stds, grid.cv_results_['params']):
...         print("%0.3f (+/-%0.03f) for %r"
...                 % (mean, std * 2, params))
...     # TRAIN THE MODEL
...     xgb_classifier = grid.best_estimator_.fit(training_data, ttp_train)
...     predictions = xgb_classifier.predict(test_data)    
...     accuracy, f1_micro, f1_macro = accuracy_score(ttp_test, predictions), f1_score(ttp_test, predictions, average='micro'), f1_score(ttp_test, predictions, average='macro')
...     # Print the results
...     print(f'Accuracy: {accuracy:.2f}')
...     print(f'Micro-averaged F1 Score: {f1_micro:.2f}')
...     print(f'Macro-averaged F1 Score: {f1_macro:.2f}')
... 
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
Grid scores on development set:
0.740 (+/-0.108) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.740 (+/-0.118) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.740 (+/-0.108) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.751 (+/-0.100) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.725 (+/-0.136) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.736 (+/-0.084) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.718 (+/-0.130) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.725 (+/-0.138) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.706 (+/-0.094) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.725 (+/-0.122) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.714 (+/-0.101) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.710 (+/-0.108) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
0.725 (+/-0.061) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.732 (+/-0.097) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.710 (+/-0.091) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.758 (+/-0.101) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.729 (+/-0.124) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.740 (+/-0.097) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.695 (+/-0.105) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.725 (+/-0.058) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.703 (+/-0.115) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.736 (+/-0.084) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.706 (+/-0.094) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.740 (+/-0.092) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
Accuracy: 0.67
Micro-averaged F1 Score: 0.67
Macro-averaged F1 Score: 0.67
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
Grid scores on development set:
0.740 (+/-0.075) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.762 (+/-0.062) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.744 (+/-0.070) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.725 (+/-0.069) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.736 (+/-0.115) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.732 (+/-0.094) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.732 (+/-0.051) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.740 (+/-0.111) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.729 (+/-0.068) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.736 (+/-0.108) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.721 (+/-0.065) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.732 (+/-0.116) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
0.747 (+/-0.099) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.744 (+/-0.061) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.744 (+/-0.138) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.736 (+/-0.093) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.725 (+/-0.099) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.747 (+/-0.113) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.740 (+/-0.124) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.758 (+/-0.111) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.718 (+/-0.111) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.725 (+/-0.091) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.721 (+/-0.124) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.732 (+/-0.137) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
Accuracy: 0.70
Micro-averaged F1 Score: 0.70
Macro-averaged F1 Score: 0.70
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
Grid scores on development set:
0.744 (+/-0.130) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.733 (+/-0.140) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.747 (+/-0.125) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.751 (+/-0.121) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.740 (+/-0.117) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.729 (+/-0.143) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.736 (+/-0.091) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.725 (+/-0.144) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.732 (+/-0.119) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.729 (+/-0.154) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.717 (+/-0.125) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.718 (+/-0.146) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
0.751 (+/-0.159) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.751 (+/-0.112) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.740 (+/-0.127) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.732 (+/-0.089) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.725 (+/-0.144) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.740 (+/-0.126) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.725 (+/-0.117) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.706 (+/-0.130) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.718 (+/-0.108) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.714 (+/-0.098) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.703 (+/-0.092) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.714 (+/-0.113) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
Accuracy: 0.77
Micro-averaged F1 Score: 0.77
Macro-averaged F1 Score: 0.76
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
Grid scores on development set:
0.744 (+/-0.080) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.714 (+/-0.099) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.736 (+/-0.041) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.725 (+/-0.057) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.729 (+/-0.079) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.721 (+/-0.093) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.718 (+/-0.074) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.714 (+/-0.079) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.721 (+/-0.101) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.703 (+/-0.085) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.729 (+/-0.103) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.691 (+/-0.098) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
0.718 (+/-0.070) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.710 (+/-0.114) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.721 (+/-0.068) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.703 (+/-0.068) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.718 (+/-0.062) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.703 (+/-0.084) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.703 (+/-0.071) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.706 (+/-0.066) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.706 (+/-0.101) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.699 (+/-0.065) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.699 (+/-0.057) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.688 (+/-0.099) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
Accuracy: 0.80
Micro-averaged F1 Score: 0.80
Macro-averaged F1 Score: 0.80
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
Grid scores on development set:
0.736 (+/-0.134) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.710 (+/-0.124) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.718 (+/-0.117) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.721 (+/-0.096) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.717 (+/-0.093) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.710 (+/-0.107) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.728 (+/-0.145) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.703 (+/-0.180) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.725 (+/-0.124) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.688 (+/-0.183) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.710 (+/-0.164) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.691 (+/-0.180) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
0.721 (+/-0.125) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.744 (+/-0.130) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.732 (+/-0.125) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.725 (+/-0.111) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.729 (+/-0.109) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.732 (+/-0.112) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.740 (+/-0.164) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.729 (+/-0.149) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.747 (+/-0.134) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.729 (+/-0.131) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.729 (+/-0.101) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.714 (+/-0.147) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
Accuracy: 0.83
Micro-averaged F1 Score: 0.83
Macro-averaged F1 Score: 0.83
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
Grid scores on development set:
0.751 (+/-0.104) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.755 (+/-0.077) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.744 (+/-0.087) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.744 (+/-0.090) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.744 (+/-0.101) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.714 (+/-0.096) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.736 (+/-0.130) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.744 (+/-0.146) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.725 (+/-0.099) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.714 (+/-0.127) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.714 (+/-0.063) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.718 (+/-0.136) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
0.751 (+/-0.093) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.762 (+/-0.090) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.744 (+/-0.090) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.766 (+/-0.095) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.707 (+/-0.121) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.733 (+/-0.110) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.729 (+/-0.075) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.729 (+/-0.081) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.714 (+/-0.094) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.710 (+/-0.119) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.714 (+/-0.109) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.710 (+/-0.099) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
Accuracy: 0.83
Micro-averaged F1 Score: 0.83
Macro-averaged F1 Score: 0.83
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
Grid scores on development set:
0.773 (+/-0.097) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.785 (+/-0.110) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.770 (+/-0.089) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.781 (+/-0.134) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.769 (+/-0.077) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.777 (+/-0.112) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.755 (+/-0.091) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.784 (+/-0.106) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.744 (+/-0.070) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.770 (+/-0.086) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.747 (+/-0.100) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.762 (+/-0.086) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
0.792 (+/-0.102) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.799 (+/-0.062) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.785 (+/-0.139) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.799 (+/-0.088) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.777 (+/-0.111) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.803 (+/-0.083) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.762 (+/-0.097) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.766 (+/-0.067) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.755 (+/-0.091) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.770 (+/-0.089) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.766 (+/-0.089) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.766 (+/-0.090) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
Accuracy: 0.67
Micro-averaged F1 Score: 0.67
Macro-averaged F1 Score: 0.67
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
Grid scores on development set:
0.770 (+/-0.079) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.758 (+/-0.065) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.781 (+/-0.070) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.766 (+/-0.067) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.762 (+/-0.054) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.777 (+/-0.096) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.770 (+/-0.098) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.762 (+/-0.091) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.744 (+/-0.102) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.773 (+/-0.091) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.751 (+/-0.101) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.766 (+/-0.098) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
0.781 (+/-0.091) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.799 (+/-0.092) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.766 (+/-0.075) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.781 (+/-0.091) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.773 (+/-0.072) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.773 (+/-0.053) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.777 (+/-0.085) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.766 (+/-0.075) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.773 (+/-0.116) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.766 (+/-0.068) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.770 (+/-0.076) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.770 (+/-0.055) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
Accuracy: 0.53
Micro-averaged F1 Score: 0.53
Macro-averaged F1 Score: 0.53
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
Grid scores on development set:
0.755 (+/-0.087) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.762 (+/-0.026) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.770 (+/-0.089) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.751 (+/-0.105) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.755 (+/-0.045) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.732 (+/-0.055) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.762 (+/-0.100) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.784 (+/-0.083) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.747 (+/-0.069) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.747 (+/-0.058) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.740 (+/-0.081) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.736 (+/-0.025) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
0.751 (+/-0.037) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.770 (+/-0.054) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.755 (+/-0.062) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.758 (+/-0.065) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.740 (+/-0.041) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.747 (+/-0.051) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.770 (+/-0.072) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.751 (+/-0.071) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.743 (+/-0.044) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.747 (+/-0.048) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.743 (+/-0.029) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.740 (+/-0.056) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
Accuracy: 0.70
Micro-averaged F1 Score: 0.70
Macro-averaged F1 Score: 0.67
CountVectorizer(max_features=3000, ngram_range=(1, 3), stop_words='english')
Best parameters set found on development set:
{'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
Grid scores on development set:
0.722 (+/-0.097) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.744 (+/-0.098) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.763 (+/-0.103) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.759 (+/-0.110) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.756 (+/-0.118) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.733 (+/-0.109) for {'alpha': 0.01, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.763 (+/-0.135) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.759 (+/-0.128) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.737 (+/-0.161) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.756 (+/-0.141) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.722 (+/-0.154) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.726 (+/-0.139) for {'alpha': 0.01, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
0.744 (+/-0.092) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.01}
0.744 (+/-0.064) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 50, 'reg_lambda': 0.1}
0.759 (+/-0.124) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.01}
0.741 (+/-0.078) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 100, 'reg_lambda': 0.1}
0.752 (+/-0.132) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.01}
0.748 (+/-0.114) for {'alpha': 0.1, 'learning_rate': 0.1, 'n_estimators': 200, 'reg_lambda': 0.1}
0.744 (+/-0.171) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.01}
0.744 (+/-0.135) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 50, 'reg_lambda': 0.1}
0.737 (+/-0.145) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.01}
0.719 (+/-0.147) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 100, 'reg_lambda': 0.1}
0.726 (+/-0.108) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.01}
0.726 (+/-0.153) for {'alpha': 0.1, 'learning_rate': 0.2, 'n_estimators': 200, 'reg_lambda': 0.1}
Accuracy: 0.79
Micro-averaged F1 Score: 0.79
Macro-averaged F1 Score: 0.79
>>> 